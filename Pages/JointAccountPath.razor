@* @page "/jointaccountpath";

@inject IState<WizardFundingProgressState> WizardProgressStep
@inject IDispatcher dispatcher
@inject NavigationManager Navigation


<PageTitle>Account Origination Demo</PageTitle>

<div>
    <ProgressJointWizardComponent WizardStep="@WizardProgress()"/>
    @switch (WizardProgress())
    {
        case "1":
            <GetStartedJoint EventAfterSubmit="OnSuccessfulSubmit"/>
        break;
        case "2":
            <CreateLoginJoint EventAfterSubmit="OnSuccessfulSubmit" GoBackEvent="PreviousStep"/>
        break;
        case "3":
            <UploadJoint GoBackEvent="PreviousStep" NextStep="OnSuccessfulSubmit"/>
        break;
        case "4":
            <AddressInformationJoint EventAfterSubmit="OnSuccessfulSubmit" GoBackEvent="PreviousStep"/>
        break;
        case "5":
            <TermsAndConditionsJoint GoBack="PreviousStep" EventAfterSubmit="OnSuccessfulSubmit"/>
        break;
        default:
            <Account_Origination_Demo.Pages.Dashboard.DataValidation />
        break;
    }
</div>

@code
{
    static private List<string> Steps = new List<string> { "1", "2", "3", "4", "5", "6", "7"};
    static private string CurrentStep = "1";
    private int currentIndex() => Steps.IndexOf(CurrentStep);
    private void StoreStepIntoState() => dispatcher.Dispatch(new WizardFundingProgressAction( wizardFundingProgressStep: CurrentStep ));
    private string WizardProgress()
    {
        var CurrentProgressStep = WizardProgressStep.Value.WizardFundingProgressStep;

        if(string.IsNullOrEmpty(CurrentProgressStep))
        {
            return "1";
        }
        else
        {
            return WizardProgressStep.Value.WizardFundingProgressStep!;
        }
    }

    public void OnSuccessfulSubmit()
    {
        if (currentIndex() < Steps.Count - 1)
        {
            CurrentStep = Steps[currentIndex() + 1];
        }
            StoreStepIntoState();
    }

    private void PreviousStep()
    {
        if (currentIndex() > 0)
        {
            CurrentStep = Steps[currentIndex() - 1];
        }
            StoreStepIntoState();
    }

    private void Navigate() => Navigation.NavigateTo("dashboard");
} *@